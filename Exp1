OS P1

#include <stdio.h>
#include <stdbool.h>
#define NUM_PROCESSES 4
#define NUM_RESOURCES 3
int main() 
{
int claim[NUM_PROCESSES][NUM_RESOURCES] = 
{
    {3, 2, 2},
    {6, 1, 3},
    {3, 1, 4},
    {4, 2, 2}
};
int allocation[NUM_PROCESSES][NUM_RESOURCES] = 
{
    {1, 0, 0},
    {6, 1, 2},
    {2, 1, 1},
    {0, 0, 2}
};
int available[NUM_RESOURCES] = {9, 3, 6};
int work[NUM_RESOURCES];
bool finish[NUM_PROCESSES];
for (int i = 0; i < NUM_RESOURCES; i++) 
{
work[i] = available[i];
}
for (int i = 0; i < NUM_PROCESSES; i++) 
{
finish[i] = false;
}
bool safe = true;
int count = 0;
int sequence[NUM_PROCESSES];
while (count < NUM_PROCESSES) 
{
bool found = false;
for (int i = 0; i < NUM_PROCESSES; i++) 
{
if (!finish[i]) 
{
bool can_run = true;
for (int j = 0; j < NUM_RESOURCES; j++) 
{
if (claim[i][j] - allocation[i][j] > work[j]) 
{
can_run = false;
break;
}
}
if (can_run) 
{
for (int j = 0; j < NUM_RESOURCES; j++) 
{
 work[j] += allocation[i][j];
}
finish[i] = true;
sequence[count] = i;
count++;
found = true;
}
}
}
if (!found) 
{
safe = false;
break;
}
}
if (safe) 
{
printf("Safe sequence: ");
for (int i = 0; i < NUM_PROCESSES; i++) 
{
printf("%d ", sequence[i]);
}
printf("\n");
} 
else 
{
printf("No safe sequence found.\n");
}
return 0;
}
